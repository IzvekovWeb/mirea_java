{"version":3,"sources":["Components/StudentsTable.js","Components/SubjectsItem.js","Components/SubjectsTable.js","Components/JournalItem.js","Components/JournalTable.js","Components/IncomingMessage.js","Components/UserPanel.js","App.js","serviceWorker.js","index.js"],"names":["StudentsTable","props","onSort","sortField","cloneData","state","students","concat","sortType","sort","orderedData","_","orderBy","setState","sendMessage","fetch","selectedStudent","method","headers","body","JSON","stringify","selectedGroup","then","res","json","result","isLoaded","error","studyGroups","handleChangeStudent","bind","handleChangeGroup","event","this","target","value","console","log","message","colSpan","onClick","map","student","key","id","name","surname","secondName","studyGroupId","onChange","group","React","Component","SubjectsItem","subject","shortName","type","SubjectsTable","subjects","JournalItem","journalItem","mark","studentId","markId","studyPlanId","classes","push","count","className","join","JournalTable","journal","IncomingMessage","groupInfo","firstSubj","secondSubj","thirdSubj","fourthSubj","fifthSubj","groupId","study_group_id","first_subject_id","second_subject_id","third_subject_id","fourth_subject_id","fifth_subject_id","prevProps","UserPanel","clientRef","isRecieved","groups","recievedGroup","handleChange","handleSubmit","alert","preventDefault","url","topics","onConnect","onDisconnect","onMessage","msg","ref","client","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.275b96f0.chunk.js","sourcesContent":["import React, {Component} from 'react'\n//import StudentsItem from './StudentsItem.js'\nimport _ from 'lodash';\n\nclass StudentsTable extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            sort: 'asc', // 'desc'\n            sortField: 'id',\n            students: [],\n            studyGroups: [],\n            selectedGroup: 1,\n            selectedStudent: 1\n        };\n\n        //this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChangeStudent = this.handleChangeStudent.bind(this);\n        this.handleChangeGroup = this.handleChangeGroup.bind(this);\n    }\n\n    componentDidMount() {\n\n        fetch(\"http://localhost:8080/student/show_all\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        students: result\n                    });\n                },\n                // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n                // чтобы не перехватывать исключения из ошибок в самих компонентах.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n        fetch(\"http://localhost:8080/study_group/show_all\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        studyGroups: result\n                    });\n                },\n                // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n                // чтобы не перехватывать исключения из ошибок в самих компонентах.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    onSort = sortField => {\n        const cloneData = this.state.students.concat();\n        const sortType = this.state.sort === 'asc' ? 'desc' : 'asc';\n        const orderedData = _.orderBy(cloneData, sortField, sortType);\n\n        this.setState({\n            students: orderedData,\n            sort: sortType,\n            sortField\n        })\n    }\n\n    sendMessage = () => {\n        fetch(`http://localhost:8080/student-change/${this.state.selectedStudent}`, {\n            method: \"PUT\",\n            headers: {\n                'Accept': 'application/json, text/plain',\n                'Content-Type': 'application/json;charset=UTF-8'\n            },\n            /*body:  JSON.stringify({\n                \"surname\": this.state.students[this.state.selectedStudent].surname,\n                \"name\": this.state.students[this.state.selectedStudent].name,\n                \"secondName\": this.state.students[this.state.selectedStudent].secondName,\n                \"studyGroupId\": this.state.selectedGroup\n            })*/\n            body:  JSON.stringify({\n                \"studyGroupId\": this.state.selectedGroup\n            })\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true\n                    });\n                },\n                // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n                // чтобы не перехватывать исключения из ошибок в самих компонентах.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    };\n\n    /*handleSubmit(event) {\n        event.preventDefault();\n    }*/\n\n    handleChangeGroup(event) {\n        this.setState({\n            selectedGroup: event.target.value\n        });\n        console.log(this.state.selectedGroup)\n    }\n    handleChangeStudent(event) {\n        this.setState({\n            selectedStudent: event.target.value\n        });\n        console.log(event.target.value)\n    }\n\n    render() {\n        const { error, isLoaded, students } = this.state;\n        if (error) {\n            return <div>Ошибка: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Загрузка...</div>;\n        } else {\n            return (\n                <div>\n                <table>\n                    <thead>\n                        <tr>\n                            <td colSpan={5} onClick={this.sendMessage}>Список всех студентов</td>\n                        </tr>\n                        <tr>\n                            <th onClick={this.onSort.bind(null, 'id')}>№\n                                {this.state.sortField === 'id' ? <small>{this.state.sort}</small> : null}</th>\n                            <th onClick={this.onSort.bind(null, 'name')}>Имя\n                                {this.state.sortField === 'name' ? <small>{this.state.sort}</small> : null}</th>\n                            <th onClick={this.onSort.bind(null, 'surname')}>Фамилия\n                                {this.state.sortField === 'surname' ? <small>{this.state.sort}</small> : null}</th>\n                            <th onClick={this.onSort.bind(null, 'secondName')}>Отчество\n                                {this.state.sortField === 'secondName' ? <small>{this.state.sort}</small> : null}</th>\n                            <th onClick={this.onSort.bind(null, 'studyGroupId')}>Группа\n                                {this.state.sortField === 'studyGroupId' ? <small>{this.state.sort}</small> : null}</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.students.map((student) => (\n                            <tr key={student.id}>\n                                <td>{student.id}</td>\n                                <td>{student.name}</td>\n                                <td>{student.surname}</td>\n                                <td>{student.secondName}</td>\n                                <td>{student.studyGroupId}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n                <select onChange={this.handleChangeStudent}>\n                    { this.state.students.map((student) => (\n                        <option value={student.id}>{student.surname + \" \" + student.name}</option>\n                    ))}\n                </select>\n                <select onChange={this.handleChangeGroup}>\n                    { this.state.studyGroups.map((group) => (\n                        <option value={group.id}>{group.name}</option>\n                    ))}\n                </select>\n                <button onClick={this.sendMessage}>Подтвердить</button>\n                </div>\n        );\n        }\n    }\n}\n\nexport default StudentsTable;","import React from 'react'\n\nfunction SubjectsItem({subject}) {\n    return (\n        <tr>\n            <td>{subject.id}</td>\n            <td>{subject.name}</td>\n            <td>{subject.shortName}</td>\n            <td>{subject.type}</td>\n        </tr>\n    )\n}\n\nexport default SubjectsItem","import React, {Component} from 'react'\nimport SubjectsItem from './SubjectsItem.js'\n\nclass SubjectsTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            subjects: []\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"http://localhost:8080/subject/show_all\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        subjects: result\n                    });\n                },\n                // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n                // чтобы не перехватывать исключения из ошибок в самих компонентах.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    render() {\n        const { error, isLoaded, subjects } = this.state;\n        if (error) {\n            return <div>Ошибка: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Загрузка...</div>;\n        } else {\n            return (\n                <table>\n                    <thead>\n                    <tr>\n                        <td colSpan={4}>Список всех предметов</td>\n                    </tr>\n                    <tr>\n                        <td>№</td>\n                        <td>Название</td>\n                        <td>Сокращение</td>\n                        <td>Тип аттестации</td>\n                    </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.subjects.map((subject) => (\n                            <SubjectsItem key={subject.id} subject={subject} />\n                        ))}\n                    </tbody>\n                </table>\n            );\n        }\n    }\n}\n\nexport default SubjectsTable;","import React from \"react\";\n\nclass JournalItem extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            journalItem: [],\n            student: [],\n            subject: [],\n            mark: []\n        };\n    }\n\n    componentDidMount() {\n        fetch(`http://localhost:8080/student/${this.props.journalItem.studentId}`)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        student: result\n                    });\n                },\n                // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n                // чтобы не перехватывать исключения из ошибок в самих компонентах.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n\n        fetch(`http://localhost:8080/mark/${this.props.journalItem.markId}`)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        mark: result,\n                        journalItem: this.props.JournalItem\n                    });\n                },\n                // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n                // чтобы не перехватывать исключения из ошибок в самих компонентах.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n\n        fetch(`http://localhost:8080/subject/${this.props.journalItem.studyPlanId}`)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        subject: result\n                    });\n                },\n                // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n                // чтобы не перехватывать исключения из ошибок в самих компонентах.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    render() {\n        const { error, isLoaded, journalItem, student, mark } = this.state;\n        if (error) {\n            return <tr><td>Ошибка: {error.message}</td></tr>;\n        } else if (!isLoaded) {\n            return <tr><td>Загрузка...</td></tr>;\n        } else {\n            const classes =[]\n            if (this.state.mark.name === \"Незачет\" || this.state.mark.name === \"Неудовлетворительно\") {\n                classes.push('red-bg');\n            }\n            if (this.state.mark.name === \"Удовлетворительно\") {\n                classes.push('orange-bg');\n            }\n            return (\n                <tr>\n                    <td>{this.props.journalItem.id}</td>\n                    <td>{this.state.student.name}</td>\n                    <td>{this.state.student.surname}</td>\n                    <td>{this.state.subject.name}</td>\n                    <td>{this.props.journalItem.count}</td>\n                    <td className={classes.join(' ')}>{this.state.mark.name}</td>\n                </tr>\n            );\n        }\n    }\n}\n\nexport default JournalItem;","import React, {Component} from 'react'\nimport JournalItem from './JournalItem.js'\n\nclass JournalTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            journal: []\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"http://localhost:8080/journal/show_all\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        journal: result\n                    });\n                },\n                // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n                // чтобы не перехватывать исключения из ошибок в самих компонентах.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    render() {\n        const { error, isLoaded, journal } = this.state;\n        if (error) {\n            return <div>Ошибка: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Загрузка...</div>;\n        } else {\n            return (\n                <table>\n                    <thead>\n                    <tr>\n                        <td colSpan={5}>Список всех студентов</td>\n                    </tr>\n                    <tr>\n                        <td>№</td>\n                        <td>Имя студента</td>\n                        <td>Фамилия</td>\n                        <td>Предмет </td>\n                        <td>Кол-во пересдач</td>\n                        <td>Оценка</td>\n                    </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.journal.map((journalItem) => (\n                            <JournalItem key={journalItem.id} journalItem={journalItem} />\n                        ))}\n                    </tbody>\n                </table>\n            );\n        }\n    }\n}\n\nexport default JournalTable;","import React from 'react';\n\n\nclass IncomingMessage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            groupInfo: [],\n            group: '',\n            firstSubj: '',\n            secondSubj: '',\n            thirdSubj: '',\n            fourthSubj: '',\n            fifthSubj: ''\n        };\n    }\n\n    componentDidMount() {\n        fetch(`http://localhost:8080/study_group_plan/${this.props.groupId}`)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    console.log(this.props.groupId)\n                    this.setState({\n                        isLoaded: true,\n                        groupInfo: result\n                    });\n                    fetch(`http://localhost:8080/study_group/${this.state.groupInfo.study_group_id}`)\n                        .then(res => res.json())\n                        .then(\n                            (result) => {\n                                this.setState({\n                                    group: result.name\n                                });\n                            })\n                    fetch(`http://localhost:8080/subject/${this.state.groupInfo.first_subject_id}`)\n                        .then(res => res.json())\n                        .then(\n                            (result) => {\n                                this.setState({\n                                    firstSubj: result.name\n                                });\n                            })\n                    fetch(`http://localhost:8080/subject/${this.state.groupInfo.second_subject_id}`)\n                        .then(res => res.json())\n                        .then(\n                            (result) => {\n                                this.setState({\n                                    secondSubj: result.name\n                                });\n                            })\n                    fetch(`http://localhost:8080/subject/${this.state.groupInfo.third_subject_id}`)\n                        .then(res => res.json())\n                        .then(\n                            (result) => {\n                                this.setState({\n                                    thirdSubj: result.name\n                                });\n                            })\n                    fetch(`http://localhost:8080/subject/${this.state.groupInfo.fourth_subject_id}`)\n                        .then(res => res.json())\n                        .then(\n                            (result) => {\n                                this.setState({\n                                    fourthSubj: result.name\n                                });\n                            })\n                    fetch(`http://localhost:8080/subject/${this.state.groupInfo.fifth_subject_id}`)\n                        .then(res => res.json())\n                        .then(\n                            (result) => {\n                                this.setState({\n                                    fifthSubj: result.name\n                                });\n                            })\n\n                },\n                // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n                // чтобы не перехватывать исключения из ошибок в самих компонентах.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                })\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.groupId !== prevProps.groupId) {\n            fetch(`http://localhost:8080/study_group_plan/${this.props.groupId}`)\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        console.log(this.props.groupId)\n                        this.setState({\n                            isLoaded: true,\n                            groupInfo: result\n                        });\n                        fetch(`http://localhost:8080/study_group/${this.state.groupInfo.study_group_id}`)\n                            .then(res => res.json())\n                            .then(\n                                (result) => {\n                                    this.setState({\n                                        group: result.name\n                                    });\n                                })\n                        fetch(`http://localhost:8080/subject/${this.state.groupInfo.first_subject_id}`)\n                            .then(res => res.json())\n                            .then(\n                                (result) => {\n                                    this.setState({\n                                        firstSubj: result.name\n                                    });\n                                })\n                        fetch(`http://localhost:8080/subject/${this.state.groupInfo.second_subject_id}`)\n                            .then(res => res.json())\n                            .then(\n                                (result) => {\n                                    this.setState({\n                                        secondSubj: result.name\n                                    });\n                                })\n                        fetch(`http://localhost:8080/subject/${this.state.groupInfo.third_subject_id}`)\n                            .then(res => res.json())\n                            .then(\n                                (result) => {\n                                    this.setState({\n                                        thirdSubj: result.name\n                                    });\n                                })\n                        fetch(`http://localhost:8080/subject/${this.state.groupInfo.fourth_subject_id}`)\n                            .then(res => res.json())\n                            .then(\n                                (result) => {\n                                    this.setState({\n                                        fourthSubj: result.name\n                                    });\n                                })\n                        fetch(`http://localhost:8080/subject/${this.state.groupInfo.fifth_subject_id}`)\n                            .then(res => res.json())\n                            .then(\n                                (result) => {\n                                    this.setState({\n                                        fifthSubj: result.name\n                                    });\n                                })\n\n                    },\n                    // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n                    // чтобы не перехватывать исключения из ошибок в самих компонентах.\n                    (error) => {\n                        this.setState({\n                            isLoaded: true,\n                            error\n                        });\n                    }\n                )\n        }\n\n    }\n\n    render() {\n        return (\n            <table>\n                <thead>\n                    <tr><th colSpan={6}>Учебный план</th></tr>\n                    <tr>\n                        <th>Группа</th>\n                        <th>Понедельник</th>\n                        <th>Вторник</th>\n                        <th>Среда</th>\n                        <th>Четверг</th>\n                        <th>Пятница</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>{this.state.group}</td>\n                        <td>{this.state.firstSubj}</td>\n                        <td>{this.state.secondSubj}</td>\n                        <td>{this.state.thirdSubj}</td>\n                        <td>{this.state.fourthSubj}</td>\n                        <td>{this.state.fifthSubj}</td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    }\n\n}\nexport default IncomingMessage;","import React from 'react';\n\nimport SockJsClient from 'react-stomp';\nimport JournalTable from \"./JournalTable\";\nimport IncomingMessage from \"./IncomingMessage\";\n\nclass UserPanel extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            isRecieved: false,\n            groups: [],\n            selectedGroup: 1,\n            recievedGroup: 1\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        fetch(`http://localhost:8080/group/show_all`)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        groups: result\n                    });\n                },\n                // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n                // чтобы не перехватывать исключения из ошибок в самих компонентах.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    handleChange(event) {\n        this.setState({selectedGroup: event.target.value});\n    }\n\n    handleSubmit(event) {\n        alert('Отправленное имя: ' + this.state.selectedGroup);\n        event.preventDefault();\n    }\n\n    sendMessage = () => {\n        this.clientRef.sendMessage('/app/user-all', JSON.stringify({\n            message: this.state.selectedGroup\n        }));\n    };\n\n    render() {\n        const { isRecieved } = this.state;\n        if (isRecieved) {\n            return (\n                <div>\n                    <form>\n                        <label>\n                            Выберите вашу учебную группу:\n                            <select onChange={this.handleChange}>\n                                { this.state.groups.map((group) => (\n                                    <option value={group.id}>{group.name}</option>\n                                ))}\n                            </select>\n                        </label>\n                    </form>\n                    <SockJsClient url='http://localhost:8080/websocket-chat/'\n                                  topics={['/topic/user']}\n                                  onConnect={() => {\n                                      console.log(\"connected\");\n                                  }}\n                                  onDisconnect={() => {\n                                      console.log(\"Disconnected\");\n                                  }}\n                                  onMessage={(msg) => {\n                                      console.log(msg);\n                                      this.setState({recievedGroup: msg.message, isRecieved: true} )\n                                  }}\n                                  ref={(client) => {\n                                      this.clientRef = client\n                                  }}/>\n                    <button onClick={this.sendMessage}>Разослать учебный план</button>\n                    <IncomingMessage groupId={this.state.recievedGroup} />\n                </div>\n        ); } else {\n            return (\n                <div>\n                    <form>\n                        <label>\n                            Выберите вашу учебную группу:\n                            <select onChange={this.handleChange}>\n                                { this.state.groups.map((group) => (\n                                    <option value={group.id}>{group.name}</option>\n                                ))}\n                            </select>\n                        </label>\n                    </form>\n                    <SockJsClient url='http://localhost:8080/websocket-chat/'\n                                  topics={['/topic/user']}\n                                  onConnect={() => {\n                                      console.log(\"connected\");\n                                  }}\n                                  onDisconnect={() => {\n                                      console.log(\"Disconnected\");\n                                  }}\n                                  onMessage={(msg) => {\n                                      console.log(msg);\n                                      this.setState({recievedGroup: msg.message, isRecieved: true} )\n                                  }}\n                                  ref={(client) => {\n                                      this.clientRef = client\n                                  }}/>\n                    <button onClick={this.sendMessage}>Разослать учебный план</button>\n                </div>\n            )\n        }\n    }\n\n}\n\nexport default UserPanel;","import React,  {useState, useEffect} from 'react';\n//import logo from './logo.svg'\nimport './App.css';\nimport StudentsTable from \"./Components/StudentsTable\";\nimport SubjectsTable from \"./Components/SubjectsTable\";\nimport JournalTable from \"./Components/JournalTable\";\nimport UserPanel from \"./Components/UserPanel\"\nimport SockJsClient from 'react-stomp';\n\nclass App extends React.Component {\n\n    render() {\n        return (\n            <div>\n                <UserPanel />\n                <hr />\n                <StudentsTable />\n                <hr />\n                <SubjectsTable />\n                <hr />\n                <JournalTable />\n                </div>\n        );\n    }\n}\n/*function App() {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n\n    // Примечание: пустой массив зависимостей [] означает, что\n    // этот useEffect будет запущен один раз\n    // аналогично componentDidMount()\n    useEffect(() => {\n        fetch('http://localhost:8080/student/1/?format=json')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setItems(result.items);\n                },\n                // Примечание: Обрабатывать ошибки необходимо именно здесь\n                // вместо блока catch(), чтобы не пропустить\n                // исключения из реальных ошибок в компонентах.\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n    }, [])\n\n    if (error) {\n        return <div>Ошибка: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Загрузка...</div>;\n    } else {\n        console.log(items)\n        return (\n            <ul>\n                {items.map(item => (\n                    <li key={item.name}>\n                        {item.name} {item.surname}\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n}*/\n\n    /*constructor() {\n        super();\n        this.state = {\n            activeGroup: 0,\n            students: null\n        };\n    }\n    componentDidMount() {\n        Request.getStudents().then((students) => {\n            this.setState({students: students});\n        });\n    }\n    render() {\n        return (\n            <div className=\"App\">\n        {this.state.students ? <JournalTable\n            students={this.state.students[this.state.activeGroup]}/> : null}\n        <button onClick={() => {\n            this.setState({activeGroup: 0});\n        }}>Группа 1</button>\n        <button onClick={() => {\n            this.setState({activeGroup: 1});\n        }}>Группа 2</button>\n        <button onClick={() => {\n            this.setState({activeGroup: 2});\n        }}>Группа 3</button>\n        </div>\n        );\n    }*/\n\n\n/*class JournalTable extends Component {\n    render() {\n        return (\n            <table bordered>\n                <thead>\n                    <tr>\n                    <th>#</th>\n                    <th>ФИО</th>\n                    <th>ПрИС</th>\n                    <th>СИИ</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.students.map((student, index) => {\n                                return <tr>\n                            <td>{index + 1}</td>\n                            <td>{student.name}</td>\n                            <td>{student.surname}</td>\n                            <td>{student.second_name}</td>\n                            </tr>\n                    })}\n                </tbody>\n            </table>\n        )\n    }\n}*/\n\n/*const API_KEY = \"82b797b6ebc625032318e16f1b42c016\";\n\nclass App extends Component {\n\n\n\n    getStudents = async (e) => {\n        e.preventDefault();\n        //const api_url = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=Kazan&appid=${API_KEY}&units=metric`)\n        const api_url = await fetch(`http://localhost:8080/student/show_all`)\n        const data = await api_url.json();\n        console.log(\"da\")\n        console.log(data);\n        return false;\n    }\n\n  render() {\n    return (\n        <div className=\"App\">\n            <Request myMethod={this.getStudents}/>\n        </div>\n    );\n  }\n}*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}