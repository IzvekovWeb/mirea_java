{"version":3,"sources":["logo.svg","Components/StudentsItem.js","Components/StudentsTable.js","Components/SubjectsItem.js","Components/SubjectsTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StudentItem","student","id","name","surname","secondName","studyGroupId","StudentsTable","props","state","error","isLoaded","students","fetch","then","res","json","result","setState","this","message","colSpan","map","StudentsItem","React","Component","SubjectsItem","subject","shortName","type","SubjectsTable","subjects","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,0ICc5BC,MAZf,YAAiC,IAAXC,EAAU,EAAVA,QAClB,OACI,4BACI,4BAAKA,EAAQC,IACb,4BAAKD,EAAQE,MACb,4BAAKF,EAAQG,SACb,4BAAKH,EAAQI,YACb,4BAAKJ,EAAQK,gBCsDVC,E,kDA1DX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAO,KACPC,UAAU,EACVC,SAAU,IALC,E,gEASE,IAAD,OAChBC,MAAM,0CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,EAAKC,SAAS,CACVP,UAAU,EACVC,SAAUK,OAGlB,SAACP,GACG,EAAKQ,SAAS,CACVP,UAAU,EACVD,e,+BAMV,IAAD,EACiCS,KAAKV,MAAnCC,EADH,EACGA,MAAOC,EADV,EACUA,SADV,EACoBC,SACzB,OAAIF,EACO,sEAAcA,EAAMU,SACnBT,EAIJ,+BACI,+BACI,4BACI,wBAAIU,QAAS,GAAb,yHAEJ,4BACI,sCACA,kDACA,0EACA,gFACA,sEAGPF,KAAKV,MAAMG,SAASU,KAAI,SAACrB,GAAD,OACrB,kBAACsB,EAAD,CAActB,QAASA,QAjB5B,wF,GAnCSuB,IAAMC,WCUnBC,MAXf,YAAkC,IAAXC,EAAU,EAAVA,QACnB,OACI,4BACI,4BAAKA,EAAQzB,IACb,4BAAKyB,EAAQxB,MACb,4BAAKwB,EAAQC,WACb,4BAAKD,EAAQE,QCwDVC,E,kDA3DX,WAAYtB,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAO,KACPC,UAAU,EACVoB,SAAU,IALC,E,gEASE,IAAD,OAChBlB,MAAM,0CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,EAAKC,SAAS,CACVP,UAAU,EACVoB,SAAUd,OAKlB,SAACP,GACG,EAAKQ,SAAS,CACVP,UAAU,EACVD,e,+BAMV,IAAD,EACiCS,KAAKV,MAAnCC,EADH,EACGA,MAAOC,EADV,EACUA,SADV,EACoBoB,SACzB,OAAIrB,EACO,sEAAcA,EAAMU,SACnBT,EAIJ,+BACI,+BACA,4BACI,wBAAIU,QAAS,GAAb,yHAEJ,4BACI,sCACA,gFACA,4FACA,iHAGHF,KAAKV,MAAMsB,SAAST,KAAI,SAACK,GAAD,OACrB,kBAAC,EAAD,CAAcA,QAASA,QAhB5B,wF,GArCSH,IAAMC,WC4InBO,E,uKAvIP,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALER,IAAMC,WCMJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMU,c","file":"static/js/main.5f4f399d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nfunction StudentItem({student}) {\n    return (\n        <tr>\n            <td>{student.id}</td>\n            <td>{student.name}</td>\n            <td>{student.surname}</td>\n            <td>{student.secondName}</td>\n            <td>{student.studyGroupId}</td>\n        </tr>\n    )\n}\n\nexport default StudentItem","import React, {Component} from 'react'\nimport StudentsItem from './StudentsItem.js'\n\nclass StudentsTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            students: []\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"http://localhost:8080/student/show_all\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        students: result\n                    });\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    render() {\n        const { error, isLoaded, students } = this.state;\n        if (error) {\n            return <div>Ошибка: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Загрузка...</div>;\n        } else {\n            return (\n                <table>\n                    <thead>\n                        <tr>\n                            <td colSpan={5}>Список всех студентов</td>\n                        </tr>\n                        <tr>\n                            <td>№</td>\n                            <td>Имя</td>\n                            <td>Фамилия</td>\n                            <td>Отчество</td>\n                            <td>Группа</td>\n                        </tr>\n                    </thead>\n                    {this.state.students.map((student) => (\n                        <StudentsItem student={student} />\n                    ))}\n                </table>\n            );\n        }\n    }\n}\n\nexport default StudentsTable;","import React from 'react'\n\nfunction SubjectsItem({subject}) {\n    return (\n        <tr>\n            <td>{subject.id}</td>\n            <td>{subject.name}</td>\n            <td>{subject.shortName}</td>\n            <td>{subject.type}</td>\n        </tr>\n    )\n}\n\nexport default SubjectsItem","import React, {Component} from 'react'\nimport SubjectsItem from './SubjectsItem.js'\n\nclass SubjectsTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            subjects: []\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"http://localhost:8080/subject/show_all\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        subjects: result\n                    });\n                },\n                // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n                // чтобы не перехватывать исключения из ошибок в самих компонентах.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    render() {\n        const { error, isLoaded, subjects } = this.state;\n        if (error) {\n            return <div>Ошибка: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Загрузка...</div>;\n        } else {\n            return (\n                <table>\n                    <thead>\n                    <tr>\n                        <td colSpan={4}>Список всех предметов</td>\n                    </tr>\n                    <tr>\n                        <td>№</td>\n                        <td>Название</td>\n                        <td>Сокращение</td>\n                        <td>Тип аттестации</td>\n                    </tr>\n                    </thead>\n                    {this.state.subjects.map((subject) => (\n                        <SubjectsItem subject={subject} />\n                    ))}\n                </table>\n            );\n        }\n    }\n}\n\nexport default SubjectsTable;","import React,  {useState, useEffect} from 'react';\nimport logo from './logo.svg'\nimport './App.css';\nimport StudentsTable from \"./Components/StudentsTable\";\nimport SubjectsTable from \"./Components/SubjectsTable\";\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <StudentsTable />\n                <SubjectsTable />\n            </div>\n        );\n    }\n}\n/*function App() {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n\n    // Примечание: пустой массив зависимостей [] означает, что\n    // этот useEffect будет запущен один раз\n    // аналогично componentDidMount()\n    useEffect(() => {\n        fetch('http://localhost:8080/student/1/?format=json')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setItems(result.items);\n                },\n                // Примечание: Обрабатывать ошибки необходимо именно здесь\n                // вместо блока catch(), чтобы не пропустить\n                // исключения из реальных ошибок в компонентах.\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n    }, [])\n\n    if (error) {\n        return <div>Ошибка: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Загрузка...</div>;\n    } else {\n        console.log(items)\n        return (\n            <ul>\n                {items.map(item => (\n                    <li key={item.name}>\n                        {item.name} {item.surname}\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n}*/\n\n    /*constructor() {\n        super();\n        this.state = {\n            activeGroup: 0,\n            students: null\n        };\n    }\n    componentDidMount() {\n        Request.getStudents().then((students) => {\n            this.setState({students: students});\n        });\n    }\n    render() {\n        return (\n            <div className=\"App\">\n        {this.state.students ? <JournalTable\n            students={this.state.students[this.state.activeGroup]}/> : null}\n        <button onClick={() => {\n            this.setState({activeGroup: 0});\n        }}>Группа 1</button>\n        <button onClick={() => {\n            this.setState({activeGroup: 1});\n        }}>Группа 2</button>\n        <button onClick={() => {\n            this.setState({activeGroup: 2});\n        }}>Группа 3</button>\n        </div>\n        );\n    }*/\n\n\n/*class JournalTable extends Component {\n    render() {\n        return (\n            <table bordered>\n                <thead>\n                    <tr>\n                    <th>#</th>\n                    <th>ФИО</th>\n                    <th>ПрИС</th>\n                    <th>СИИ</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.students.map((student, index) => {\n                                return <tr>\n                            <td>{index + 1}</td>\n                            <td>{student.name}</td>\n                            <td>{student.surname}</td>\n                            <td>{student.second_name}</td>\n                            </tr>\n                    })}\n                </tbody>\n            </table>\n        )\n    }\n}*/\n\n/*const API_KEY = \"82b797b6ebc625032318e16f1b42c016\";\n\nclass App extends Component {\n\n\n\n    getStudents = async (e) => {\n        e.preventDefault();\n        //const api_url = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=Kazan&appid=${API_KEY}&units=metric`)\n        const api_url = await fetch(`http://localhost:8080/student/show_all`)\n        const data = await api_url.json();\n        console.log(\"da\")\n        console.log(data);\n        return false;\n    }\n\n  render() {\n    return (\n        <div className=\"App\">\n            <Request myMethod={this.getStudents}/>\n        </div>\n    );\n  }\n}*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}